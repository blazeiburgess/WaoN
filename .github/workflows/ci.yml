name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        # Temporarily disable Windows until dependencies are sorted out
        # os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            cmake_generator: "Unix Makefiles"
            dependencies_cmd: |
              sudo apt-get update
              sudo apt-get install -y libfftw3-dev libsndfile1-dev libao-dev libsamplerate0-dev libgtk2.0-dev libncurses5-dev
          - os: macos-latest
            cmake_generator: "Unix Makefiles"
            dependencies_cmd: |
              brew install fftw libsndfile libao libsamplerate gtk+ ncurses

    steps:
    - uses: actions/checkout@v3

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache
          ~/Library/Caches
          C:\vcpkg\installed
        key: ${{ runner.os }}-deps-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Install dependencies
      run: ${{ matrix.dependencies_cmd }}

    - name: Configure CMake
      run: |
        cmake -B build -G "${{ matrix.cmake_generator }}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_WAON=ON \
          -DBUILD_PV=ON \
          -DBUILD_GWAON=ON \
          -DBUILD_SHARED_LIB=OFF

    - name: Build
      run: cmake --build build --config Release

    - name: Test executable
      run: |
        if [ "${{ matrix.os }}" != "windows-latest" ]; then
          ./build/waon --version
          ./build/pv --version
        else
          ./build/waon.exe --version || true
          ./build/pv.exe --version || true
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: waon-${{ matrix.os }}
        path: |
          build/waon*
          build/pv*
          build/gwaon*
          build/*.so
          build/*.dylib
          build/*.dll

  test-python:
    name: Test Python bindings on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to save CI time
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y libfftw3-dev libsndfile1-dev python3-dev libao-dev
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          brew install fftw libsndfile libao
        fi
      shell: bash

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pybind11 pytest pytest-cov soundfile

    - name: Build and install Python bindings
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIB=ON -DBUILD_PYTHON_BINDINGS=ON -DBUILD_WAON=OFF -DBUILD_PV=OFF -DBUILD_GWAON=OFF
        cmake --build build --config Release
        cd python
        pip install -e .

    - name: Run Python tests
      run: |
        cd python
        python -m pytest tests/ -v --cov=waon --cov-report=xml || true

    - name: Test import and basic functionality
      run: |
        python -c "import waon; print(f'WaoN version: {waon.version_string()}')"
        python -c "import waon; t = waon.Transcriber(); print('Transcriber created successfully')"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        file: ./python/coverage.xml
        flags: python
        name: codecov-python

  lint:
    name: Lint and code quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        pip install cpplint flake8 black isort

    - name: Lint C/C++ code
      run: |
        find src -name "*.c" -o -name "*.h" -o -name "*.cpp" | xargs cpplint --filter=-legal/copyright,-build/include_subdir || true

    - name: Lint Python code
      run: |
        cd python
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        black --check . || true
        isort --check-only . || true